关于 DynamoDB 的 Scan 全表扫描

解决方案：
	1. 最简单直接的方式，简历索引。
		缺点： 
			1). 就会增加存储和 I/O 成本，无益于应用程序性能，维护索引所需的 I/O 操作成本也非常高。
			2). 创建索引的同时需要投影一些需要返回的属性字段，当属性字段越多占用存储空间和预配置吞吐量就越多，性能优势将不那么明显，
				所以 必须尽可能的减少投影属性的数量，最大程度减少写入索引的项目大小。

				文档原文：
					请尽量减少投影属性的数量，最大程度减少写入索引的项目大小。但是，如果这些项目比一个写入容量单位 (1 KB) 还要小，则这些项目将不会节省写入容量单位。例如，如果索引条目的大小仅为 200 字节，DynamoDB 就会将其向上取整为 1 KB。也就是说，如果索引项目很小的话，您可以投影更多属性，而不会额外增加成本。

					如果您知道在查询中很少用到表的某些属性，就不必投影这些属性。如果您后来更新了索引中没有的属性，将不会因更新索引而额外产生成本。您仍然可以在查询中检索未投影的属性，但是需要的预配置吞吐量成本会更高。

					只有当您需要让查询返回整个表项目，同时按不同的排序键对表排序时，才应指定  ALL 。对所有属性编制索引后就不会再需要表抓取，但在大多数情况下，这样会使得存储和写入活动成本加倍。
			3). 只能使用全局2级索引。因为本地二级索引只能在创建表的时候进行创建，并且二级索引有容量限制
	2. 创建新的表。
		将需要查询的字段做新表主键，绑定需要的旧表主键。
		缺点：
			1). 在原有的数据量基础上，可能需要关联较多的数据，复制和引入数据时间的成本。
			2). 会多一步操作，多一个HTTP请求，在网络不好的情况下可能会有影响。

	3. 	在客户端和DynamoDB之间再增加一层查询，类似于上面第2条。将需要根据查询的字段在数据写入 												DynamoDB存储到本地数据库或者缓存，只需要当前查询字段和 pushToken做一个映射即可。也可以考虑用EHCache 做本地缓存。